//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.09.06 at 04:58:26 PM CDT 
//


package xccdfClasses;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for statusType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="statusType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="accepted"/>
 *     &lt;enumeration value="deprecated"/>
 *     &lt;enumeration value="draft"/>
 *     &lt;enumeration value="incomplete"/>
 *     &lt;enumeration value="interim"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "statusType")
@XmlEnum
public enum StatusType {


    /**
     * Released as final
     * 
     */
    @XmlEnumValue("accepted")
    ACCEPTED("accepted"),

    /**
     * No longer needed
     * 
     */
    @XmlEnumValue("deprecated")
    DEPRECATED("deprecated"),

    /**
     * Released in draft state
     * 
     */
    @XmlEnumValue("draft")
    DRAFT("draft"),

    /**
     * Under initial development
     * 
     */
    @XmlEnumValue("incomplete")
    INCOMPLETE("incomplete"),

    /**
     * Revised and in the process of being
     *                         finalized
     * 
     */
    @XmlEnumValue("interim")
    INTERIM("interim");
    private final String value;

    StatusType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StatusType fromValue(String v) {
        for (StatusType c: StatusType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
