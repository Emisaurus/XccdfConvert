//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.09.06 at 04:58:26 PM CDT 
//


package junk;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for valueOperatorType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="valueOperatorType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="equals"/>
 *     &lt;enumeration value="not equal"/>
 *     &lt;enumeration value="greater than"/>
 *     &lt;enumeration value="less than"/>
 *     &lt;enumeration value="greater than or equal"/>
 *     &lt;enumeration value="less than or equal"/>
 *     &lt;enumeration value="pattern match"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "valueOperatorType")
@XmlEnum
public enum ValueOperatorType {

    @XmlEnumValue("equals")
    EQUALS("equals"),
    @XmlEnumValue("not equal")
    NOT_EQUAL("not equal"),
    @XmlEnumValue("greater than")
    GREATER_THAN("greater than"),
    @XmlEnumValue("less than")
    LESS_THAN("less than"),
    @XmlEnumValue("greater than or equal")
    GREATER_THAN_OR_EQUAL("greater than or equal"),
    @XmlEnumValue("less than or equal")
    LESS_THAN_OR_EQUAL("less than or equal"),
    @XmlEnumValue("pattern match")
    PATTERN_MATCH("pattern match");
    private final String value;

    ValueOperatorType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ValueOperatorType fromValue(String v) {
        for (ValueOperatorType c: ValueOperatorType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
